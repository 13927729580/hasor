<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" default-autowire="byType"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:h="http://www.hasor.net/schema/spring-hasor"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
        http://www.hasor.net/schema/spring-hasor http://www.hasor.net/schema/spring-hasor/spring-hasor-4.1.2.xsd">

    <!-- Spring 容器中配置多个 Hasor，不同的 Hasor 彼此独立 -->

    <!-- String 中托管的 Module -->
    <bean id="testModuleA" class="net.hasor.test.spring.mod1.TestModuleA"/>
    <bean id="testModuleB" class="net.hasor.test.spring.mod1.TestModuleB"/>

    <!-- 创建 Hasor 容器1 -->
    <h:hasor id="hasor_1" startWithRef="testModuleA">
        <!-- 由于目前RSF是自动启动，因此在 hasor-spring 工程中需要避免两个 RSF 环境争抢同一个端口 -->
        <h:property name="RSF_SERVICE_PORT" value="2180"/>
        <h:loadModule>
            <!-- 引用 Spring 容器中的 Module -->
            <h:module refBean="testModuleB"/>
            <!-- class 配置的类型也会先在 Spring 中定义这个 Bean 然后在引用 -->
            <h:module class="net.hasor.test.spring.mod1.TestModuleC"/>
        </h:loadModule>
    </h:hasor>

    <!-- 创建 Hasor 容器2 -->
    <h:hasor id="hasor_2" startWith="net.hasor.test.spring.mod1.TestModuleD">
        <!-- 由于目前RSF是自动启动，因此在 hasor-spring 工程中需要避免两个 RSF 环境争抢同一个端口 -->
        <h:property name="RSF_SERVICE_PORT" value="2170"/>
    </h:hasor>
</beans>
