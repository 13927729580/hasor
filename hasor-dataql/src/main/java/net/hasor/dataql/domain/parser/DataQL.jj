options {
    STATIC              = false;
    JAVA_UNICODE_ESCAPE = true; // 支持中文必须
    UNICODE_INPUT       = true; // 支持中文必须
//    LOOKAHEAD = 2;
//    FORCE_LA_CHECK=true;
}

// ------------------------------------------------------------------------------------------------

PARSER_BEGIN(DataQLParser)
/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.hasor.dataql.domain.parser;
import net.hasor.dataql.domain.*;
import net.hasor.dataql.domain.PrimitiveExpression.*;
import net.hasor.dataql.domain.SubscriptExpression.*;
import java.util.*;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
 /**
  * DSL 语法解析器
  * @author 赵永春 (zyc@hasor.net)
  * @version : 2017-03-23
  */
public class DataQLParser {
    private DataQLParser (){}
    //
    public static BlockSet parserDataQL(String queryString) throws ParseException {
        DataQLParser parser = new DataQLParser(new ByteArrayInputStream(queryString.getBytes()));
        return parser.rootBlock();
    }
    public static BlockSet parserDataQL(InputStream inputStream,String encoding) throws ParseException {
        DataQLParser parser = new DataQLParser(inputStream,encoding);
        return parser.rootBlock();
    }
    public static Number automaticBigInteger(java.math.BigInteger bigInt) {
        int bitLength = bigInt.bitLength();
        if (bitLength < 8) {
            return bigInt.byteValue();
        }
        if (bitLength < 16) {
            return bigInt.shortValue();
        }
        if (bitLength < 32) {
            return bigInt.intValue();
        }
        if (bitLength < 64) {
            return bigInt.longValue();
        }
        return bigInt;
    }
    public static Number automaticBigDecimal(java.math.BigDecimal bigDec) {
        int precisionLength = bigDec.precision();
        if (precisionLength < 8) {
            return bigDec.floatValue();
        }
        if (precisionLength < 16) {
            return bigDec.doubleValue();
        }
        return bigDec;
    }
    public static String fixNumberValue(Token t) {
        boolean signBit = t.image.charAt(0) == '-';
        if (t.kind == HEX_NUM || t.kind == OCTAL_NUM || t.kind == BINARY_NUM) {
            if (signBit) {
                return "-" + t.image.substring(3);
            } else {
                return t.image.substring(2);
            }
        }
        return t.image;
    }
}
PARSER_END(DataQLParser)

// ------------------------------------------------------------------------------------------------
/* Ignore Comments */
SKIP:{
      " "   // 空格
    | "\t"  // 水平制表符  (垂直制表符 \v)
    | "\n"  // 换行
    | "\r"  // 回车
    | "\f"  // 换页
}
SPECIAL_TOKEN: {
    <C_SINGLE_COMMENT   : "//" (~["\n","\r","\f"])* <EOL>> |
    <C_MULTILINE_COMMENT: "/*" (~[])* "*/"> |
    <EOL                : "\n" | "\r" | "\f">
}
/* key words */
TOKEN:{
      < IF                  : "if" >
    | < ELSEIF              : "elseif" >
    | < ELSE                : "else" >
    | < END                 : "end" >
    | < RETURN              : "return" >
    | < THROW               : "throw" >
    | < EXIT                : "exit" >
    | < VAR                 : "var" >
    | < TRUE                : "true" >
    | < FALSE               : "false" >
    | < NULL                : "null" >
    | < OPTION              : "option" >
    | < IMPORT              : "import" >
    | < AS                  : "as" >
}
/* Number */
TOKEN:{
	  <#ZERO       :  "0" >
	| <#SYMBOL     : ["+","-"] >
    | <#DIGIT      : ["0"-"9"] >
	| <INTEGER_NUM : (<SYMBOL>)?                     (<DIGIT>)+ >                   // 十进制数：-0000234 or 123
    | <HEX_NUM     :             (<ZERO> ["x","X"]) (["0"-"9","a"-"f","A"-"F"])+ >  // 十六进制：0x12345
    | <OCTAL_NUM   :             (<ZERO> ["o","O"]) (["0"-"7"])+ >                  // 八 进 制：0o1234567
    | <BINARY_NUM  :             (<ZERO> ["b","B"]) (["0"-"7"])+ >                  // 二 进 制：0b01010101100
	| <DECIMAL_NUM : (<SYMBOL>)? (<DIGIT>)+ ("." (<DIGIT>)*)?
	                             (["e","E"] (<SYMBOL>)? (<DIGIT>)+ )? >             // 浮点数，包含科学计数法
}
/* String */
TOKEN:{
    <#STR_DOUBLE_BODY : ( ~["\"","\\","\r","\n","\f","\t"]) |                       // 双引号字符串
                          ( "\\"["r","n","f","t","\\","b","\"","'"]) >              // 双引号字符串（body部分）
    | <STR_DOUBLE_QUOTED:   "\"" (<STR_DOUBLE_BODY>)* "\"">                         // 双引号的字符串（整体）
    | <#STR_SINGLE_BODY : ( ~["'","\\","\r","\n","\f","\t"]) |                      // 单引号字符串
                          ( "\\"["r","n","f","t","\\","b","\"","'"]) >              // 单引号字符串（body部分）
    | <STR_SINGLE_QUOTED:   "'" (<STR_SINGLE_BODY>)* "'" >                          // 单引号的字符串（整体）
    | <STR_EMPTY        : ( "\"\"" | "''")>                                         // 空字符串
}
/* IDENTIFIER */
TOKEN:{
    <#LETTER: [ "A"-"Z","a"-"z","_" ]>                                              // 字母or下划线
    | <IDENTIFIER    : ( <LETTER> ) ( ["0"-"9"] | <LETTER> )* >                    // 标识符,必须字母 or 下划线开头
}
/* OPERATORS */
TOKEN:{
      < COMMA               : "," >
    | < COLON               : ":" >
    | < QUEM                : "?" >
    | < SEMI                : ";" >
    | < ASS                 : "=">
    | < DOT                 : ".">

    | < OPAR                : "(" >
    | < CPAR                : ")" >
    | < OBRA                : "[" >
    | < CBRA                : "]" >

    | < OCBR                : "{" >
    | < OCBREXT             : (["@","#","$"]) >
    | < CCBR                : "}" >

    | < BANG                : "!" >

    | < PLUS                : "+" >
    | < MINUS               : "-" >
    | < STAR                : "*" >
    | < SLASH               : "/" >
    | < REM                 : "%" >
    | < ALI                 : "\\" >

    | < GT                  : ">" >
    | < GE                  : ">=" >
    | < LT                  : "<" >
    | < LE                  : "<=" >
    | < EQ                  : "==" >
    | < NE                  : "!=" >

    | < BIT_AND             : "&" >
    | < BIT_OR              : "|" >
    | < XOR                 : "^" >

    | < LSHIFT              : "<<" >
    | < RSIGNEDSHIFT        : ">>" >
    | < RUNSIGNEDSHIFT      : ">>>" >

    | < SC_OR               : "||" >
    | < SC_AND              : "&&" >
}
//----------------------------------------------------------------------------- 基本类型
// .字符串
String stringValue() : {         Token dataToken = null;
}{
    (
        dataToken = <STR_DOUBLE_QUOTED>
    ) | (
        dataToken = <STR_SINGLE_QUOTED>
    ) | (
        dataToken = <STR_EMPTY>
    )                           {String image = dataToken.image; return image.substring(1, image.length()-1);}
}
// .空值
Object nullValue() : {} {
	<NULL>                      {return null;}
}
// .布尔
Boolean booleanValue() : {} {
    (
        <TRUE>                  {return Boolean.TRUE;}
    ) | (
        <FALSE>                 {return Boolean.FALSE;}
    )
}
// .数字
Number numberValue() : {         Number number = null;
                                 Token  t      = null;
}{
    (
        t = <DECIMAL_NUM>       {number = automaticBigDecimal(new java.math.BigDecimal(fixNumberValue(t)));}
    ) | (
            t = <INTEGER_NUM>   {number = automaticBigInteger(new java.math.BigInteger(fixNumberValue(t)));}
    ) | (
            t = <HEX_NUM>       {number = automaticBigInteger(new java.math.BigInteger(fixNumberValue(t),16));}
    ) | (
            t = <OCTAL_NUM>     {number = automaticBigInteger(new java.math.BigInteger(fixNumberValue(t),8));}
    ) | (
            t = <BINARY_NUM>    {number = automaticBigInteger(new java.math.BigInteger(fixNumberValue(t),2));}
    )                           {return number;}
}

// 值-基本类型（string\null\boolean\number）
PrimitiveVariable primitiveValue() : {               Object    value     = null;
} {
    (
        value = stringValue()                       {return new PrimitiveVariable(value,ValueType.String);}
    ) | (
        value = nullValue()                         {return new PrimitiveVariable(value,ValueType.Null);}
    ) | (
        value = booleanValue()                      {return new PrimitiveVariable(value,ValueType.Boolean);}
    ) | (
        value = numberValue()                       {return new PrimitiveVariable(value,ValueType.Number);}
    )
}
//----------------------------------------------------------------------------- 表达式
// .表达式：优先级、一元运算、二元运算、三元运算、值表达式
Expression expression() : {                      Expression exp;
} {
    (
        // 优先级
        <OPAR> exp = expression() <CPAR>        {exp = new PrivilegeExpression(exp);}
        (
            (
                exp = dyadicExpression(exp)
            ) | (
                exp = ternaryExpression(exp)
            )
        )?                                      {return exp;}
    ) | (
        exp = unaryExpression()                 {return exp;}
    ) | (
        exp = valueExpression()
        (
            (
                exp = dyadicExpression(exp)
            ) | (
                exp = ternaryExpression(exp)
            )
        )?                                      {return exp;}
    )
}
// 表达式：一元运算
Expression unaryExpression() : {                 Token      symbol = null;
                                                 Expression target = null;
} {
    ( symbol = <BANG> | symbol = <MINUS> )
    target = valueExpression()                  {return new UnaryExpression(target,symbol.image);}
}
// 表达式：二元运算
DyadicExpression dyadicExpression(Expression fstExp) : {
                                                 Token      symbol = null;
                                                 Expression secExp = null;
} {
    (
          symbol = <PLUS>
        | symbol = <MINUS>
        | symbol = <STAR>
        | symbol = <SLASH>
        | symbol = <REM>
        | symbol = <ALI>
        | symbol = <GT>
        | symbol = <GE>
        | symbol = <LT>
        | symbol = <LE>
        | symbol = <EQ>
        | symbol = <NE>
        | symbol = <BIT_AND>
        | symbol = <BIT_OR>
        | symbol = <XOR>
        | symbol = <LSHIFT>
        | symbol = <RSIGNEDSHIFT>
        | symbol = <RUNSIGNEDSHIFT>
        | symbol = <SC_OR>
        | symbol = <SC_AND>
    )
    secExp = expression()                           {return new DyadicExpression(fstExp,symbol.image,secExp);}
}
// 表达式：三元运算
Expression ternaryExpression(Expression testExp) : { Expression thenExp = null;
                                                     Expression elseExp = null;
} {
    <QUEM> thenExp = expression()
    <COLON> elseExp = expression()                  {return new TernaryExpression(testExp,thenExp,elseExp);}
}
// .表达式的项
Expression valueExpression() : {                     Variable finalVar = null;
} {
    LOOKAHEAD(functionCall())(
        finalVar = functionCall()                   // 情况3：函数调用
    ) | (
        finalVar = routeValue(null)                 // 情况2：路由
    ) | (
        finalVar = primitiveValue()                 // 情况1：基础四种类型 string\boolean\number\null
    )                                               {return finalVar;}
}
//----------------------------------------------------------------------------- 可以作为表达式的项
// .路由：{...}
RouteVariable routeValue(RouteVariable parent) : {   RouteVariable routeVar = parent;
                                                     Token specialCodeToken = null;
} {
    (
        // 特殊路由
        specialCodeToken = <OCBREXT>
        <OCBR>
        routeVar = routeIdentifier(routeVar,specialCodeToken.image) {specialCodeToken=null;}
        ( <DOT> routeVar = routeIdentifier(routeVar,null) )*
        <CCBR>
    ) | (
        // 一般路由
        routeVar = routeIdentifier(routeVar,"")
        ( <DOT> routeVar = routeIdentifier(routeVar,null) )*
    )                                               {return routeVar;}
}
RouteVariable routeIdentifier(RouteVariable parent,String specialCodeToken) : {
                                                     RouteVariable routeVar = parent;
                                                     Token         t        = null;
} {
    t = <IDENTIFIER>                                {routeVar = new RouteVariable(parent,t.image,specialCodeToken);}
    (
        <OBRA>                                      {Token numberKey = null;String stringKey = null;}
        (
            numberKey = <INTEGER_NUM>               {routeVar = new SubscriptExpression(routeVar,new PrimitiveVariable(numberKey.image,ValueType.Number),SubscriptType.Number);}
        ) | (
            stringKey = stringValue()               {routeVar = new SubscriptExpression(routeVar,new PrimitiveVariable(stringKey,ValueType.String),SubscriptType.StringKey);}
        )
        <CBRA>
    )?                                              {return routeVar;}
}
// .函数调用 function Call
RouteVariable functionCall() : {                     RouteVariable routeVar = null;
} {
    routeVar = routeIdentifier(routeVar,"")         {CallerVariable callerExp = new CallerVariable(routeVar);}
    (
        LOOKAHEAD(2) (
            <OPAR><CPAR>
        ) | (
            <OPAR>                                  {Variable atParam = null;}
            atParam = polymericObject()             {callerExp.addParam(atParam);atParam = null;}
            (
                <COMMA> atParam = polymericObject() {callerExp.addParam(atParam);atParam = null;}
            )*
            <CPAR>
        )
    )
    (
        routeVar = routeIdentifier(callerExp,"")
    )?                                              {return routeVar;}
}
//----------------------------------------------------------------------------- 可以作为表达式的项
// .可以作为函数参数的参数项
Variable polymericObject() : {                           Variable value = null;
} {
    (
        value = objectValue()
    ) | (
        value = listValue()
    ) | (
        value = functionCallConvert()
    )                                                   {return value;}
}

Variable functionCallConvert() : {       Variable exp =null;
}{
    exp = functionCall()
    (
        "=>"
        (
            exp = objectValue()         {return new ObjectFormat(exp);}
        ) | (
            exp = listValue()           {return new ListFormat(exp);}
        )
    )?                                  {return new RawFormat(exp);}
}

//----------------------------------------------------------------------------- 可以作为表达式的项

// .值-列表：[...]
ListVariable listValue() : {                         ListVariable listVar = new ListVariable();
}{
    <OBRA>
    (                                               {Expression valueExp = null;}
        valueExp = polymericObject()                {listExp.addItem(valueExp);valueExp = null;}
        (
            <COMMA> valueExp = polymericObject()    {listExp.addItem(valueExp);valueExp = null;}
        )*
    )?
    <CBRA>                                         {return listVar;}
}

// .值-对象类型：{...}
ObjectVariable objectValue() : {                        ObjectVariable objectVar = new ObjectVariable();
                                                        String         fieldName = null;
                                                        Expression     valueExp  = null;
} {
    <OCBR>
    (
        fieldName = stringValue()                       {valueExp = new RouteExpression(fieldName);}
        (
            <COLON> valueExp = polymericObject()        {objExp.addField(fieldName,valueExp);fieldName = null;valueExp=null;}
        )?
        (
            <COMMA> fieldName = stringValue()           {valueExp = new RouteExpression(fieldName);}
            (
                <COLON> valueExp = polymericObject()
            )?                                          {objExp.addField(fieldName,valueExp);fieldName = null;valueExp=null;}
        )*
    )?
    <CCBR>                                              {return objExp;}
}
//-----------------------------------------------------------------------------
// .lambda函数声明： (obj,obj2) -> {}
LambdaBlockSet lambdaDef() : {                       LambdaBlockSet lambdaBlockSet = new LambdaBlockSet();
                                                     Token          paramName      = null;
                                                     BlockSet       scriptBodys    = null;
} {
    <OPAR>
        (
            paramName = <IDENTIFIER>                {lambdaBlockSet.addParam(paramName.image);}
            (
                <COMMA> paramName = <IDENTIFIER>    {lambdaBlockSet.addParam(paramName.image);}
            )*
        )?
    <CPAR>
    "->"
    (
        (
            <OCBR> scriptBodys = blockSet() <CCBR>
        ) | (
                                                    {Inst inst = null;}
            inst = block()                          {scriptBodys = new BlockSet(Arrays.asList(inst));}
        )
    )                                               {lambdaBlockSet.addToBody(scriptBodys);}
                                                    {return lambdaBlockSet;}
}

// .变量赋值 & 表达式计算
VariableInst varBlock() : {                          String varName = null;
                                                     Variable value = null;
} {
    <VAR> varName = <IDENTIFIER> <ASS>
    (
        (
            value = lambdaDef()
        ) | (
            value = polymericObject()
        )
    )                                               {return new VariableInst(varName,value);}
}

// .判断
SwitchInst ifBlock() : {                             SwitchInst switchInst = new SwitchInst();
                                                     Expression testExp;
                                                     BlockSet   instBlockSet;
} {
        <IF> <OPAR> testExp = expression() <CPAR>
            instBlockSet = blockSet()               {switchInst.addBlockSet(testExp,instBlockSet);}
                                                    {testExp = null; instBlockSet = null;}
    (
        <ELSEIF> <OPAR> testExp = expression() <CPAR>
            instBlockSet = blockSet()               {switchInst.addBlockSet(testExp,instBlockSet);}
                                                    {testExp = null; instBlockSet = null;}
    )*
    (
        <ELSE>
            instBlockSet = blockSet()               {switchInst.setElseBlockSet(instBlockSet);}
    )?
        <END>
                                                    {return switchInst;}
}

// .异常 or 中断 or Return
Inst breakBlock() : {                                String     typeClass   = null;
                                                     Number     throwStatus = null;
                                                     Expression throwData   = null;
} {
    (
        (
            <EXIT>                                  {typeClass = "ExitInst";}
        ) | (
            <THROW>                                 {typeClass = "ThrowInst";}
        ) | (
            <RETURN>                                {typeClass = "ReturnInst";}
        )
    )
    (
        throwStatus = <INTEGER_NUM> <COMMA>
    )?
    throwData = polymericObject()                   {return "ThrowInst".equals(typeClass)?
                                                            new ThrowInst(throwStatus,throwData):
                                                            ("ExitInst".equals(typeClass)?
                                                                new ExitInst(throwStatus,throwData):
                                                                new ReturnInst(throwStatus,throwData)
                                                            );}
}

// .选项指令
Inst optionBlock() : {                               String              optKey     = null;
                                                     PrimitiveExpression optValue   = null;
} {
    <OPTION> optKey = <IDENTIFIER> <ASS> optValue = primitiveValue()
                                                    {return new OptionInst(optKey,optValue);}
}

// .import指令
Inst importBlock() : {                               String packageName = null;
                                                     String udfName     = null;
} {
    <IMPORT> packageName = stringValue() <AS> udfName = <IDENTIFIER>
                                                    {return new ImportInst(packageName,udfName);}
}

// .指令
Inst block() : {                                     Inst inst = null;
} {
    (
        inst = varBlock()
    ) | (
        inst = ifBlock()
    ) | (
        inst = breakBlock()
    )                                               {return inst;}
}

// .块
BlockSet blockSet() : {                              BlockSet blockSet = new BlockSet();
                                                     Inst inst         = null;
} {
    (
        inst = block() ( <SEMI> )?                  {blockSet.addInst(inst);inst = null;}
    )*                                              {return blockSet;}
}

// 入口
BlockSet rootBlock() : {                             BlockSet rootBlockSet = new BlockSet();
                                                     BlockSet instBlockSet = null;
                                                     Inst     preInst      = null;
} {
    (
        (
            preInst = importBlock() ( <SEMI> )?     {rootBlockSet.addInst(preInst);preInst = null;}
        ) | (
            preInst = optionBlock() ( <SEMI> )?     {rootBlockSet.addInst(preInst);preInst = null;}
        )
    )*
    instBlockSet = blockSet() <EOF>                 {rootBlockSet.addInstSet(instBlockSet);}
                                                    {return rootBlockSet;}
}