<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" default-autowire="byType"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:h="http://project.hasor.net/schema/spring/hasor-core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://project.hasor.net/schema/spring/hasor-core spring-hasor-3.2.2.xsd">

    <!-- 开启 Spring 的自动注入（开启自动注入之后 startWith 配置的启动类可以使用Spring的 @Autowired 注解） -->
    <context:annotation-config/>

    <!-- (可选) Spring 的属性文件作为 Hasor 的环境变量配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties">
            <map>
                <entry key="prop-config" value="rsf://127.0.0.1:2181/default"/>
            </map>
        </property>
    </bean>

    <!-- 初始化 Hasor
            (可选) factoryID
                Hasor框架，在Spring容器中的Bean ID。默认值为：net.hasor.core.AppContext
            (可选) refProperties
                将 ‘propertyConfigurer’ 导入的属性配置，以环境变量方式共享给 Hasor 使用。

            (可选) startWith
                让 ‘SpringModule’ 类作为 Hasor 的启动入口类

            (可选) startWithRef
                让 spring 的配置 Bean 作为 Hasor 的启动入口类。
     -->
    <h:hasor startWith="net.example.spring.MyModule" refProperties="propertyConfigurer">
        <!-- (可选) 如果需要指定Hasor配置文件那么在这里指明，否则不需要配置 -->
        <h:configFile>classpath:hasor-config.xml</h:configFile>

        <!-- (可选) 单独设置 Hasor 的环境变量 -->
        <h:property name="spring-config">this config form spring.xml.</h:property>
    </h:hasor>

    <!-- ================================================================================ -->

    <!-- 简单的 Spring Bean -->
    <bean class="net.example.spring.SimpleBean">
        <property name="value" value="ttt"/>
    </bean>

    <!-- 在 Spring 中配置一个Bean，使用 AppContext.getInstance('helloWord') 方式创建它。helloWord Bean 的定义来自于 MyModule 在初始化时创建的。 -->
    <h:bean refID="helloWord" springID="helloString"/>

    <!-- 在 Spring 中配置一个Bean，使用 AppContext.getInstance(ConfigInfo.class) 方式创建它。 -->
    <h:bean refType="net.example.spring.ConfigInfo"/>

    <!-- 创建一个Bean，将上面三个 Spring Bean 都注入进来 -->
    <bean id="myBean" class="net.example.spring.MyBean"/>
</beans>