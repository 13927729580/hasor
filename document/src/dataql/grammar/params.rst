--------------------
访问符
--------------------

取值域
------------------------------------
取值域是一种隔离机制。例如：同样名称的参数可以出现在不同的 ``值域`` 里。在 DataQL 中一共有三个可以用的值域符号：

+------+---------------------+
| 符号 | 值域                |
+======+=====================+
| $    | 值域1               |
+------+---------------------+
| #    | 值域2               |
+------+---------------------+
| @    | 值域3               |
+------+---------------------+

值域符的应用场景只有两个

    - 获取程序传来的参数
    - 结果转换中的值域


获取程序传来的参数
------------------------------------
获取程序传入的参数必须使用：``<值域符>{<参数名>}`` 方式来获取。这个特性类似 ``带参的SQL``。例如：

    - ``${abc}`` 或 ``@{abc}`` 或 ``#{abc}``

其中符号 ``$`` 由于被很多语言经常使用，相对比较亲切。因此这是一个较为常用的值域符。

.. HINT::
    DataQL 的值域，在开发者没有明确分别它们的时候。三个值域的内容是没有任何区别的。


向查询中传入参数的方式为：



















结果转换中的值域
------------------------------------


路由：
    可选的符号：`@`、`#`、`$`

    一般路由取值原理：
        首先将环境栈顶对象 copy 到数据栈顶，然后在数据栈顶的元素身上执行路由取值。

    $ss.sss.sss 是一般路由的升级形式：
        # 表示环境栈顶(同一般路由)，@ 表示第二层环境栈元素，$ 根环境栈元素（每一个结果转换都会产生一层环境栈）

    ${xxxx} 自定义取值


路由中单独只使用符号
    `@`，取上一层数据栈的数据
    `#`，取当前数据栈的数据
    `$`，取数据栈栈根数据
    例如：
        `var _0 = [1,2,3,4,5,6] ; return ${_0} => { 'a': $ }`  -> 结果为 `{ 'a' : 1 }`
