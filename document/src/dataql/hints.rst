INDEX_OVERFLOW 选项
------------------------------------
设置索引溢出的行为，可选的行为有：throw、null、near，默认为：near

+------------+----------+-----------------------------------------------------------------------------------+
| **选项值** | **默认** |  含义                                                                             |
+------------+----------+-----------------------------------------------------------------------------------+
| throw      |          | 当遇到索引溢出情况时严格的抛出 ArrayIndexOutOfBoundsException 异常                |
+------------+----------+-----------------------------------------------------------------------------------+
| null       |          | 当遇到索引溢出情况时返回 null。                                                   |
+------------+----------+-----------------------------------------------------------------------------------+
| near       | 是       | | 当遇到索引溢出情况时取最近的元素。                                              |
|            |          | | 例：正向索引溢出：`list[100]`，取最后一个、反向索引溢出：`list[-100]`，取第一个 |
+------------+----------+-----------------------------------------------------------------------------------+


MAX_DECIMAL_DIGITS 选项
------------------------------------
最大保留的小数位数，默认为：``20``

超出该范围将会根据 NUMBER_ROUNDING 选项指定的舍入模式进行舍入，默认是四舍五入。


FRAGMENT_SQL_DATA_SOURCE 选项
------------------------------------
SQL执行器使用的数据源名字，默认为：``""``。配置多个数据源的方法如下：

.. code-block:: java
    :linenos:

    public class MyModule implements Module {
        public void loadModule(ApiBinder apiBinder) throws Throwable {
            DataSource defaultDs = ...;
            DataSource dsA = ...;
            DataSource dsB = ...;
            apiBinder.installModule(new JdbcModule(Level.Full, defaultDs));   // 默认数据源
            apiBinder.installModule(new JdbcModule(Level.Full, "ds_A", dsA)); // 数据源A
            apiBinder.installModule(new JdbcModule(Level.Full, "ds_B", dsB)); // 数据源B
        }
    }


在DataQL中选择数据源：

.. code-block:: js
    :linenos:

    // 如果不设置 FRAGMENT_SQL_DATA_SOURCE 使用的是 defaultDs 数据源。
    //   - 设置值为 "ds_A" ，使用的是 dsA 数据源。
    //   - 设置值为 "ds_B" ，使用的是 dsB 数据源。
    hint FRAGMENT_SQL_DATA_SOURCE = "ds_A"

    // 声明一个 SQL
    var dataSet = @@sql() <% select * from category limit 10; %>
    // 使用 特定数据源来执行SQL。
    return dataSet();


NUMBER_ROUNDING 选项
------------------------------------
小数的舍入模式，参考 RoundingEnum 定义的舍入模式(一共八种)，默认为：四舍五入。详细配置参考：RoundingEnum 枚举。

+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| **选项值**  | **默认** |  **含义**                                                                                                     |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| UP          |          | 向远离零的方向舍入。舍弃非零部分，并将非零舍弃部分相邻的一位数字加一。                                        |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| DOWN        |          | 向接近零的方向舍入。舍弃非零部分，同时不会非零舍弃部分相邻的一位数字加一，采取截取行为。                      |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| CEILING     |          | | 向正无穷的方向舍入。如果为正数，舍入结果同ROUND_UP一致；如果为负数，舍入结果同ROUND_DOWN一致。              |
|             |          | | 注意：此模式不会减少数值大小。                                                                              |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| FLOOR       |          | | 向负无穷的方向舍入。如果为正数，舍入结果同ROUND_DOWN一致；如果为负数，舍入结果同ROUND_UP一致。              |
|             |          | | 注意：此模式不会增加数值大小。                                                                              |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| HALF_UP     | 是       | | `四舍五入` 向 `最接近` 的数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。                   |
|             |          | | 如果舍弃部分>= 0.5，则舍入行为与ROUND_UP相同；否则舍入行为与ROUND_DOWN相同。                                |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| HALF_DOWN   |          | | `五舍六入` 向 `最接近` 的数字舍入，如果与两个相邻数字的距离相等，则为向下舍入的舍入模式。                   |
|             |          | | 如果舍弃部分> 0.5，则舍入行为与ROUND_UP相同；否则舍入行为与ROUND_DOWN相同。                                 |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| HALF_EVEN   |          | | 向 `最接近` 的数字舍入，如果与两个相邻数字的距离相等，则相邻的偶数舍入。                                    |
|             |          | | 如果舍弃部分左边的数字奇数，则舍入行为与 ROUND_HALF_UP 相同；如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。|
|             |          | | 注意：在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。                                            |
|             |          | | 此舍入模式也称为 `银行家舍入法`，主要在美国使用。                                                           |
|             |          | | 四舍六入，五分两种情况，如果前一位为奇数，则入位，否则舍去。                                                |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+
| UNNECESSARY |          | | 断言请求的操作具有精确的结果，因此不需要舍入。                                                              |
|             |          | | 如果对获得精确结果的操作指定此舍入模式，则抛出 `ArithmeticException`。                                      |
+-------------+----------+---------------------------------------------------------------------------------------------------------------+


MIN_DECIMAL_WIDTH 选项
------------------------------------
浮点数计算使用的最小数值宽度，可选值有：float,double,big。默认为：double

+-------------+----------+-------------------------------------------------------+
| **选项值**  | **默认** |  **含义**                                             |
+-------------+----------+-------------------------------------------------------+
| float       |          | 使用 float 类型，作为默认数值宽度。                   |
+-------------+----------+-------------------------------------------------------+
| double      | 是       | 使用 double 类型，作为默认数值宽度。                  |
+-------------+----------+-------------------------------------------------------+
| big         |          | 使用 java.math.BigDecimal 类型，作为默认数值宽度。    |
+-------------+----------+-------------------------------------------------------+


MIN_INTEGER_WIDTH 选项
------------------------------------
浮点数计算使用的最小数值宽度，可选值有：byte,short,int,long,big。默认为：int

+-------------+----------+-------------------------------------------------------+
| **选项值**  | **默认** |  **含义**                                             |
+-------------+----------+-------------------------------------------------------+
| byte        |          | 使用 byte 类型，作为默认数值宽度。                    |
+-------------+----------+-------------------------------------------------------+
| short       |          | 使用 short 类型，作为默认数值宽度。                   |
+-------------+----------+-------------------------------------------------------+
| int         | 是       | 使用 int 类型，作为默认数值宽度。                     |
+-------------+----------+-------------------------------------------------------+
| long        |          | 使用 long 类型，作为默认数值宽度。                    |
+-------------+----------+-------------------------------------------------------+
| big         |          | 使用 java.math.BigInteger 类型，作为默认数值宽度。    |
+-------------+----------+-------------------------------------------------------+


FRAGMENT_SQL_OPEN_PACKAGE 选项
------------------------------------
SqlFragment 返回值拆包方式。

+-------------+----------+--------------------------------------------------------------------+
| **选项值**  | **默认** |  **含义**                                                          |
+-------------+----------+--------------------------------------------------------------------+
| off         |          | 返回值不拆开，无论返回数据，都以 List/Map 形式返回。               |
+-------------+----------+--------------------------------------------------------------------+
| row         |          | | 返回值拆分到行，如果返回值是多条记录那么行为和 off 相同。        |
|             |          | | 当返回 0 或 1 条记录时，自动解开最外层的 List，返回一个 Object。 |
+-------------+----------+--------------------------------------------------------------------+
| column      | 是       | | 最小粒度到列。当返回结果只有一行一列数据时。只返回具体值。       |
|             |          | | 例如： ``select count(*)`` 返回 int 类型                         |
+-------------+----------+--------------------------------------------------------------------+


FRAGMENT_SQL_QUERY_BY_PAGE 选项
------------------------------------
SqlFragment 查询执行是否使用分页模式（默认：不使用）

+-------------+----------+--------------------------------------------------------------------------+
| **选项值**  | **默认** |  **含义**                                                                |
+-------------+----------+--------------------------------------------------------------------------+
| true        |          | 在执行 select 语句时采用分页模式执行，分页模式请参考 ``SQL执行器`` 章节  |
+-------------+----------+--------------------------------------------------------------------------+
| false       | 是       | 不启用分页模式。                                                         |
+-------------+----------+--------------------------------------------------------------------------+


FRAGMENT_SQL_PAGE_DIALECT 选项
------------------------------------
SqlFragment 分页查询在改写分页查询语句时使用的方言（默认：空，需要明确指定）

通常情况下，一个应用程序的数据库类型是确定的，因此方言参数也通常通过 Hasor 环境变量形式预先设置。
这个 Hint 的作用是，可以临时改变方言。或者是在全局未指定方言的情况下设置分页方言。

如果全局已经设置了方言参数，那么也可以通过这个 Hint 来改变默认配置。


FRAGMENT_SQL_COLUMN_CASE 选项
------------------------------------
SqlFragment 返回的列信息大小写模式：default、upper、lower、hump

+-------------+----------+--------------------------------------------------------------------------+
| **选项值**  | **默认** |  **含义**                                                                |
+-------------+----------+--------------------------------------------------------------------------+
| default     | 是       | 全部列名保持大小写敏感，数据库什么样返回就什么样。                       |
+-------------+----------+--------------------------------------------------------------------------+
| upper       |          | 全部列名保持大写，如果在转换过程中发生冲突，那么会产生覆盖问题。         |
+-------------+----------+--------------------------------------------------------------------------+
| lower       |          | 全部列名保持小写，如果在转换过程中发生冲突，那么会产生覆盖问题。         |
+-------------+----------+--------------------------------------------------------------------------+
| hump        |          | 全部列名做一次驼峰转换。如：goods_id => goodsId、GOODS_id => goodsId。   |
+-------------+----------+--------------------------------------------------------------------------+
