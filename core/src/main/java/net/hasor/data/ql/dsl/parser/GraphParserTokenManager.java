/* GraphParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GraphParserTokenManager.java */
package net.hasor.data.ql.dsl.parser;
import net.hasor.data.ql.dsl.*;
import net.hasor.data.ql.dsl.domain.EqType;
import java.util.*;
import java.io.InputStream;
import java.io.ByteArrayInputStream;

/** Token Manager. */
@SuppressWarnings("unused")public class GraphParserTokenManager implements GraphParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffe00000000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 25;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 43;
            return -1;
         }
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 43;
            return 59;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 13;
         if ((active0 & 0x80000000L) != 0L)
            return 11;
         if ((active0 & 0x20000000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1ffc00000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 25;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 25;
         return -1;
      case 2:
         if ((active0 & 0x9000000000000L) != 0L)
            return 25;
         if ((active0 & 0x1f6c00000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
            return 25;
         }
         return -1;
      case 3:
         if ((active0 & 0x156000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 3;
            }
            return 25;
         }
         if ((active0 & 0xa0c00000000000L) != 0L)
            return 25;
         return -1;
      case 4:
         if ((active0 & 0x112400000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 25;
         }
         if ((active0 & 0x44000000000000L) != 0L)
            return 25;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 34:
         return jjStartNfaWithStates_0(0, 31, 11);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 39:
         return jjStartNfaWithStates_0(0, 30, 13);
      case 40:
         return jjStopAtPos(0, 33);
      case 41:
         return jjStopAtPos(0, 34);
      case 44:
         return jjStopAtPos(0, 24);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 46:
         return jjStopAtPos(0, 26);
      case 58:
         return jjStopAtPos(0, 25);
      case 59:
         return jjStopAtPos(0, 28);
      case 61:
         return jjStartNfaWithStates_0(0, 29, 17);
      case 63:
         return jjStopAtPos(0, 27);
      case 91:
         return jjStopAtPos(0, 35);
      case 93:
         return jjStopAtPos(0, 36);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x24000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 123:
         return jjStopAtPos(0, 39);
      case 125:
         return jjStopAtPos(0, 40);
      case 126:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x58000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 25);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 123:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 25);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x102000000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 25);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 119:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 25);
         break;
      case 102:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 25);
         break;
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 25);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((0xffffff7fffffc9ffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 39)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (curChar == 39)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(41, 42); }
                  else if (curChar == 45)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAdd(40); }
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  break;
               case 11:
                  if ((0xfffffffbffffc9ffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (curChar == 34)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAddStates(6, 8); }
                  }
                  else if ((0x5000ac6000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if ((0x3400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(25); }
                  }
                  else if (curChar == 33)
                     { jjCheckNAdd(17); }
                  else if (curChar == 61)
                     { jjCheckNAdd(17); }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  else if (curChar == 48)
                     { jjAddStates(9, 11); }
                  else if (curChar == 47)
                     { jjAddStates(12, 13); }
                  else if (curChar == 60)
                     { jjCheckNAddTwoStates(17, 30); }
                  else if (curChar == 62)
                     { jjCheckNAddStates(14, 16); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 33)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  if (curChar == 45)
                     { jjAddStates(17, 18); }
                  else if (curChar == 43)
                     { jjAddStates(19, 20); }
                  break;
               case 1:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 2:
                  if ((0xfffffffbffffc9ffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 4:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 20)
                     kind = 20;
                  break;
               case 6:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 7:
                  if ((0xffffff7fffffc9ffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 39 && kind > 22)
                     kind = 22;
                  break;
               case 12:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 33 && kind > 41)
                     kind = 41;
                  break;
               case 16:
                  if ((0x5000ac6000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 17:
                  if (curChar == 61 && kind > 43)
                     kind = 43;
                  break;
               case 18:
                  if (curChar == 61)
                     { jjCheckNAdd(17); }
                  break;
               case 19:
                  if (curChar == 33)
                     { jjCheckNAdd(17); }
                  break;
               case 20:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 21:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if ((0x1800000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(25); }
                  break;
               case 25:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if (curChar == 62)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 27:
                  if (curChar == 62 && kind > 43)
                     kind = 43;
                  break;
               case 28:
                  if (curChar == 62)
                     { jjCheckNAdd(27); }
                  break;
               case 29:
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(17, 30); }
                  break;
               case 30:
                  if (curChar == 60 && kind > 43)
                     kind = 43;
                  break;
               case 31:
                  if (curChar == 47)
                     { jjAddStates(12, 13); }
                  break;
               case 32:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 33:
                  if ((0xffffffffffffcbffL & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if ((0x3400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 35:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(36, 38); }
                  break;
               case 36:
                  { jjCheckNAddTwoStates(36, 38); }
                  break;
               case 37:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 38:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(40); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 42:
                  if (curChar != 46)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(46); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(6, 8); }
                  break;
               case 48:
                  if (curChar == 48)
                     { jjAddStates(9, 11); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 55:
                  if (curChar == 43)
                     { jjAddStates(19, 20); }
                  break;
               case 56:
                  if (curChar == 43 && kind > 41)
                     kind = 41;
                  break;
               case 57:
                  if (curChar == 43 && kind > 42)
                     kind = 42;
                  break;
               case 58:
                  if (curChar == 45)
                     { jjAddStates(17, 18); }
                  break;
               case 60:
                  if (curChar == 45 && kind > 42)
                     kind = 42;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     { jjCheckNAdd(25); }
                  }
                  else if ((0x1000000050000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 16:
                  if ((0x1000000050000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 22:
                  if (curChar == 124 && kind > 43)
                     kind = 43;
                  break;
               case 23:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(25); }
                  break;
               case 25:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(25); }
                  break;
               case 33:
                  { jjAddStates(21, 22); }
                  break;
               case 36:
                  { jjAddStates(23, 24); }
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(25, 26); }
                  break;
               case 49:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(50); }
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(50); }
                  break;
               case 51:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 11:
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 33:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(21, 22); }
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(23, 24); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   7, 8, 10, 2, 3, 5, 40, 41, 42, 49, 51, 53, 32, 35, 17, 27, 
   28, 59, 60, 56, 57, 33, 34, 36, 38, 45, 46, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     try { input_stream.backup(0);
        while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
           curChar = input_stream.BeginToken();
     }
     catch (java.io.IOException e1) { continue EOFLoop; }
     jjmatchedKind = 0x7fffffff;
     jjmatchedPos = 0;
     curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         continue EOFLoop;
      }
      curPos = 0;
      jjmatchedKind = 0x7fffffff;
      try {
         curChar = input_stream.readChar();
         continue;
      }
      catch (java.io.IOException e1) { }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
 }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GraphParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GraphParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3ffefffffd1f001L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoMore = {
   0x1c0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[61];
    private final int[] jjstateSet = new int[2 * 61];

    
    protected char curChar;
}
