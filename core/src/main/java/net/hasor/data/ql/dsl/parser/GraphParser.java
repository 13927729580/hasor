/* GraphParser.java */
/* Generated By:JavaCC: Do not edit this line. GraphParser.java */
package net.hasor.data.ql.dsl.parser;
import net.hasor.data.ql.dsl.*;
import net.hasor.data.ql.dsl.domain.EqType;
import java.util.*;
import java.io.InputStream;
import java.io.ByteArrayInputStream;

public class GraphParser implements GraphParserConstants {
    private GraphParser (){}
    //
    public static void parserGraphQL(String queryString) throws ParseException {
        GraphParser parser = new GraphParser(new ByteArrayInputStream(queryString.getBytes()));
        parser.rootBlock();
    }
    public static void parserGraphQL(InputStream inputStream,String encoding) throws ParseException {
        GraphParser parser = new GraphParser(inputStream,encoding);
        parser.rootBlock();
    }

//-----------------------------------------------------------------------------

// .标识符
  final public void identifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAME_LITERAL:{
      jj_consume_token(NAME_LITERAL);
      break;
      }
    case OCBRR:{
      jj_consume_token(OCBRR);
      jj_consume_token(NAME_LITERAL);
      jj_consume_token(CCBR);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .带引号的字符串
  final public void stringValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STR_DOUBLE_QUOTED:{
      jj_consume_token(STR_DOUBLE_QUOTED);
      break;
      }
    case STR_SINGLE_QUOTED:{
      jj_consume_token(STR_SINGLE_QUOTED);
      break;
      }
    case STR_EMPTY:{
      jj_consume_token(STR_EMPTY);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .空值
  final public void nullValue() throws ParseException {
    jj_consume_token(NULL);
  }

// .布尔
  final public void booleanValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .数字
  final public void numberValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECIMAL_NUM:{
      jj_consume_token(DECIMAL_NUM);
      break;
      }
    case INTEGER_NUM:{
      jj_consume_token(INTEGER_NUM);
      break;
      }
    case HEX_NUM:{
      jj_consume_token(HEX_NUM);
      break;
      }
    case OCTAL_NUM:{
      jj_consume_token(OCTAL_NUM);
      break;
      }
    case BINARY_NUM:{
      jj_consume_token(BINARY_NUM);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .列表：[ ... ]
  final public void list() throws ParseException {
    if (jj_2_1(2)) {
      jj_consume_token(OBRA);
      jj_consume_token(CBRA);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OBRA:{
        jj_consume_token(OBRA);
        expression();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_1;
          }
          jj_consume_token(COMMA);
          expression();
        }
        jj_consume_token(CBRA);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// .对象：
  final public void object() throws ParseException {
    if (jj_2_2(2)) {
      jj_consume_token(OCBR);
      jj_consume_token(CCBR);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OCBR:{
        jj_consume_token(OCBR);
        stringValue();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLON:{
          jj_consume_token(COLON);
          expression();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          stringValue();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COLON:{
            jj_consume_token(COLON);
            expression();
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            ;
          }
        }
        jj_consume_token(CCBR);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//-----------------------------------------------------------------------------

// .表达式 =   表达式 or 表达式 + 运算符
  final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPAR:{
      jj_consume_token(OPAR);
      expression();
      jj_consume_token(CPAR);
      break;
      }
    case B_O_OP:{
      jj_consume_token(B_O_OP);
      basicValue();
      break;
      }
    case INTEGER_NUM:
    case HEX_NUM:
    case OCTAL_NUM:
    case BINARY_NUM:
    case DECIMAL_NUM:
    case STR_DOUBLE_QUOTED:
    case STR_SINGLE_QUOTED:
    case STR_EMPTY:
    case OBRA:
    case OCBRR:
    case OCBR:
    case TRUE:
    case FALSE:
    case NULL:
    case NAME_LITERAL:{
      basicValue();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUEM:
    case A_O_OP:
    case TO_OP:{
      afterExpression();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void afterExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case A_O_OP:{
      jj_consume_token(A_O_OP);
      break;
      }
    case TO_OP:{
      jj_consume_token(TO_OP);
      expression();
      break;
      }
    case QUEM:{
      jj_consume_token(QUEM);
      expression();
      jj_consume_token(COLON);
      expression();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .值
  final public void basicValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_NUM:
    case HEX_NUM:
    case OCTAL_NUM:
    case BINARY_NUM:
    case DECIMAL_NUM:
    case STR_DOUBLE_QUOTED:
    case STR_SINGLE_QUOTED:
    case STR_EMPTY:
    case TRUE:
    case FALSE:
    case NULL:{
      primitiveValue();
      break;
      }
    case OCBRR:
    case NAME_LITERAL:{
      identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPAR:{
        funCall();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      }
    case OBRA:{
      list();
      break;
      }
    case OCBR:{
      object();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void primitiveValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STR_DOUBLE_QUOTED:
    case STR_SINGLE_QUOTED:
    case STR_EMPTY:{
      stringValue();
      break;
      }
    case NULL:{
      nullValue();
      break;
      }
    case TRUE:
    case FALSE:{
      booleanValue();
      break;
      }
    case INTEGER_NUM:
    case HEX_NUM:
    case OCTAL_NUM:
    case BINARY_NUM:
    case DECIMAL_NUM:{
      numberValue();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//-----------------------------------------------------------------------------
// .参数集：(xx , xx , xx)
  final public void paramSet() throws ParseException {
    if (jj_2_3(2)) {
      jj_consume_token(OPAR);
      jj_consume_token(CPAR);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPAR:{
        jj_consume_token(OPAR);
        paramItem();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          paramItem();
        }
        jj_consume_token(CPAR);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// .函数参数
  final public void paramItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LAMBDA:{
      lambdaCall();
      break;
      }
    case INTEGER_NUM:
    case HEX_NUM:
    case OCTAL_NUM:
    case BINARY_NUM:
    case DECIMAL_NUM:
    case STR_DOUBLE_QUOTED:
    case STR_SINGLE_QUOTED:
    case STR_EMPTY:
    case OPAR:
    case OBRA:
    case OCBRR:
    case OCBR:
    case B_O_OP:
    case TRUE:
    case FALSE:
    case NULL:
    case NAME_LITERAL:{
      expression();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .函数调用
  final public void funCall() throws ParseException {
    paramSet();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OBRA:{
      list();
      break;
      }
    case OCBR:{
      object();
      break;
      }
    case ORI:{
      jj_consume_token(ORI);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .Lambda函数： lambda : (obj,obj2) -> {}
  final public void lambdaCall() throws ParseException {
    jj_consume_token(LAMBDA);
    jj_consume_token(COLON);
    if (jj_2_4(2)) {
      jj_consume_token(OPAR);
      jj_consume_token(CPAR);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPAR:{
        jj_consume_token(OPAR);
        jj_consume_token(NAME_LITERAL);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          jj_consume_token(NAME_LITERAL);
        }
        jj_consume_token(CPAR);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(LAMBDAB);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OCBR:{
      jj_consume_token(OCBR);
      blockSet();
      jj_consume_token(CCBR);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_5(2147483647)) {
        block();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//-----------------------------------------------------------------------------
// .函数
  final public void varBlock() throws ParseException {
    jj_consume_token(VAR);
    identifier();
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LAMBDA:{
      lambdaCall();
      break;
      }
    case INTEGER_NUM:
    case HEX_NUM:
    case OCTAL_NUM:
    case BINARY_NUM:
    case DECIMAL_NUM:
    case STR_DOUBLE_QUOTED:
    case STR_SINGLE_QUOTED:
    case STR_EMPTY:
    case OPAR:
    case OBRA:
    case OCBRR:
    case OCBR:
    case B_O_OP:
    case TRUE:
    case FALSE:
    case NULL:
    case NAME_LITERAL:{
      expression();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .判断
  final public void ifBlock() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(OPAR);
    expression();
    jj_consume_token(CPAR);
    blockSet();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSEIF:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_5;
      }
      jj_consume_token(ELSEIF);
      jj_consume_token(OPAR);
      expression();
      jj_consume_token(CPAR);
      blockSet();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      blockSet();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(END);
  }

// .异常
  final public void throwBlock() throws ParseException {
    jj_consume_token(THROW);
    if (jj_2_6(2147483647)) {
      throwBlockStatus();
      expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_NUM:
      case HEX_NUM:
      case OCTAL_NUM:
      case BINARY_NUM:
      case DECIMAL_NUM:
      case STR_DOUBLE_QUOTED:
      case STR_SINGLE_QUOTED:
      case STR_EMPTY:
      case OPAR:
      case OBRA:
      case OCBRR:
      case OCBR:
      case B_O_OP:
      case TRUE:
      case FALSE:
      case NULL:
      case NAME_LITERAL:{
        expression();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void throwBlockStatus() throws ParseException {
    numberValue();
    jj_consume_token(COMMA);
  }

// .反回
  final public void returnBlock() throws ParseException {
    jj_consume_token(RETURN);
    expression();
  }

// .选项指令
  final public void optionBlock() throws ParseException {
    jj_consume_token(OPTION);
    identifier();
    jj_consume_token(EQ);
    primitiveValue();
  }

// .块
  final public void block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      varBlock();
      break;
      }
    case IF:{
      ifBlock();
      break;
      }
    case RETURN:{
      returnBlock();
      break;
      }
    case OPTION:{
      optionBlock();
      break;
      }
    case THROW:{
      throwBlock();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// .块
  final public void blockSet() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case RETURN:
      case THROW:
      case VAR:
      case OPTION:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_6;
      }
      block();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMI:{
        jj_consume_token(SEMI);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    }
  }

// 入口
  final public void rootBlock() throws ParseException {
    blockSet();
    jj_consume_token(0);
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(THROW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(OPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(CPAR)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(OPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(CPAR)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(OCBRR)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    if (jj_scan_token(CCBR)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(OCBR)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(CCBR)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(OPAR)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CPAR)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(OPAR)) return true;
    if (jj_scan_token(CPAR)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(LAMBDA)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    if (jj_scan_token(LAMBDAB)) return true;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(OPAR)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CPAR)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(OPAR)) return true;
    if (jj_scan_token(CPAR)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(QUEM)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(TO_OP)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(B_O_OP)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(OPAR)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(CPAR)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(OCBR)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CCBR)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(OCBR)) return true;
    if (jj_scan_token(CCBR)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(OBRA)) return true;
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CBRA)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(OPTION)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(OBRA)) return true;
    if (jj_scan_token(CBRA)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_3R_14()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_8()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GraphParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xd00000,0x0,0x1f000,0x1000000,0x0,0x2000000,0x1000000,0x2000000,0x0,0xd1f000,0x8000000,0x8000000,0x0,0xd1f000,0xd1f000,0x1000000,0x0,0xd1f000,0x0,0x1000000,0x0,0x0,0xd1f000,0x0,0x0,0xd1f000,0x0,0x0,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000040,0x0,0x600000,0x0,0x0,0x8,0x0,0x0,0x0,0x80,0x2e002ca,0xc00,0xc00,0x2,0x2e000c8,0xe00000,0x0,0x2,0x2f002ca,0xa8,0x0,0x2,0x80,0x2f002ca,0x4000,0x8000,0x2e002ca,0x10e2000,0x10e2000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GraphParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GraphParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GraphParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GraphParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new GraphParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GraphParser(GraphParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GraphParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
