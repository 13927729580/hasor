/* Generated By:JavaCC: Do not edit this line. GraphParserConstants.java */
package net.hasor.data.ql.dsl.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GraphParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int C_SINGLE_COMMENT = 6;
  /** RegularExpression Id. */
  int C_MULTILINE_COMMENT = 7;
  /** RegularExpression Id. */
  int EOL = 8;
  /** RegularExpression Id. */
  int ZERO = 9;
  /** RegularExpression Id. */
  int SYMBOL = 10;
  /** RegularExpression Id. */
  int DIGIT = 11;
  /** RegularExpression Id. */
  int INTEGER_NUM = 12;
  /** RegularExpression Id. */
  int HEX_NUM = 13;
  /** RegularExpression Id. */
  int OCTAL_NUM = 14;
  /** RegularExpression Id. */
  int BINARY_NUM = 15;
  /** RegularExpression Id. */
  int DECIMAL_NUM = 16;
  /** RegularExpression Id. */
  int LETTER = 17;
  /** RegularExpression Id. */
  int STR_UNICODE = 18;
  /** RegularExpression Id. */
  int STR_DOUBLE_BODY = 19;
  /** RegularExpression Id. */
  int STR_DOUBLE_QUOTED = 20;
  /** RegularExpression Id. */
  int STR_SINGLE_BODY = 21;
  /** RegularExpression Id. */
  int STR_SINGLE_QUOTED = 22;
  /** RegularExpression Id. */
  int STR_EMPTY = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int COLON = 25;
  /** RegularExpression Id. */
  int DOT = 26;
  /** RegularExpression Id. */
  int QUEM = 27;
  /** RegularExpression Id. */
  int SEMI = 28;
  /** RegularExpression Id. */
  int EQ = 29;
  /** RegularExpression Id. */
  int QUOTE_SINGLE = 30;
  /** RegularExpression Id. */
  int QUOTE_DOUBLE = 31;
  /** RegularExpression Id. */
  int LAMBDAB = 32;
  /** RegularExpression Id. */
  int OPAR = 33;
  /** RegularExpression Id. */
  int CPAR = 34;
  /** RegularExpression Id. */
  int OBRA = 35;
  /** RegularExpression Id. */
  int CBRA = 36;
  /** RegularExpression Id. */
  int ORI = 37;
  /** RegularExpression Id. */
  int OCBRR = 38;
  /** RegularExpression Id. */
  int OCBR = 39;
  /** RegularExpression Id. */
  int CCBR = 40;
  /** RegularExpression Id. */
  int B_O_OP = 41;
  /** RegularExpression Id. */
  int A_O_OP = 42;
  /** RegularExpression Id. */
  int TO_OP = 43;
  /** RegularExpression Id. */
  int JOIN = 44;
  /** RegularExpression Id. */
  int IF = 45;
  /** RegularExpression Id. */
  int ELSEIF = 46;
  /** RegularExpression Id. */
  int ELSE = 47;
  /** RegularExpression Id. */
  int END = 48;
  /** RegularExpression Id. */
  int RETURN = 49;
  /** RegularExpression Id. */
  int VAR = 50;
  /** RegularExpression Id. */
  int LAMBDA = 51;
  /** RegularExpression Id. */
  int TRUE = 52;
  /** RegularExpression Id. */
  int FALSE = 53;
  /** RegularExpression Id. */
  int NULL = 54;
  /** RegularExpression Id. */
  int OPTION = 55;
  /** RegularExpression Id. */
  int NAME_LITERAL = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<C_SINGLE_COMMENT>",
    "<C_MULTILINE_COMMENT>",
    "<EOL>",
    "\"0\"",
    "<SYMBOL>",
    "<DIGIT>",
    "<INTEGER_NUM>",
    "<HEX_NUM>",
    "<OCTAL_NUM>",
    "<BINARY_NUM>",
    "<DECIMAL_NUM>",
    "<LETTER>",
    "<STR_UNICODE>",
    "<STR_DOUBLE_BODY>",
    "<STR_DOUBLE_QUOTED>",
    "<STR_SINGLE_BODY>",
    "<STR_SINGLE_QUOTED>",
    "<STR_EMPTY>",
    "\",\"",
    "\":\"",
    "\".\"",
    "\"?\"",
    "\";\"",
    "\"=\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"->\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"~\"",
    "\"%{\"",
    "\"{\"",
    "\"}\"",
    "<B_O_OP>",
    "<A_O_OP>",
    "<TO_OP>",
    "\"join\"",
    "\"if\"",
    "\"elseif\"",
    "\"else\"",
    "\"end\"",
    "\"return\"",
    "\"var\"",
    "\"lambda\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"option\"",
    "<NAME_LITERAL>",
  };

}
