/* Generated By:JavaCC: Do not edit this line. GraphParserConstants.java */
package net.hasor.data.ql.dsl.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GraphParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int C_SINGLE_COMMENT = 1;
  /** RegularExpression Id. */
  int C_MULTILINE_COMMENT = 2;
  /** RegularExpression Id. */
  int WHITESPACE = 3;
  /** RegularExpression Id. */
  int EOL = 4;
  /** RegularExpression Id. */
  int ZERO = 5;
  /** RegularExpression Id. */
  int DIGIT_NONZERO = 6;
  /** RegularExpression Id. */
  int DIGIT = 7;
  /** RegularExpression Id. */
  int NUMBER_INTEGER = 8;
  /** RegularExpression Id. */
  int NUMBER_DECIMAL = 9;
  /** RegularExpression Id. */
  int STRING_SINGLE_EMPTY = 10;
  /** RegularExpression Id. */
  int STRING_DOUBLE_EMPTY = 11;
  /** RegularExpression Id. */
  int STRING_SINGLE_BODY = 12;
  /** RegularExpression Id. */
  int STRING_DOUBLE_BODY = 13;
  /** RegularExpression Id. */
  int STRING_SINGLE_NONEMPTY = 14;
  /** RegularExpression Id. */
  int STRING_DOUBLE_NONEMPTY = 15;
  /** RegularExpression Id. */
  int COMMA = 16;
  /** RegularExpression Id. */
  int COLON = 17;
  /** RegularExpression Id. */
  int QUEM = 18;
  /** RegularExpression Id. */
  int SEMI = 19;
  /** RegularExpression Id. */
  int EQ = 20;
  /** RegularExpression Id. */
  int QUOTE_SINGLE = 21;
  /** RegularExpression Id. */
  int QUOTE_DOUBLE = 22;
  /** RegularExpression Id. */
  int LAMBDAB = 23;
  /** RegularExpression Id. */
  int OPAR = 24;
  /** RegularExpression Id. */
  int CPAR = 25;
  /** RegularExpression Id. */
  int OBRA = 26;
  /** RegularExpression Id. */
  int CBRA = 27;
  /** RegularExpression Id. */
  int ORI = 28;
  /** RegularExpression Id. */
  int OCBRR = 29;
  /** RegularExpression Id. */
  int OCBR = 30;
  /** RegularExpression Id. */
  int CCBR = 31;
  /** RegularExpression Id. */
  int SPIN = 32;
  /** RegularExpression Id. */
  int B_O_OP = 33;
  /** RegularExpression Id. */
  int A_O_OP = 34;
  /** RegularExpression Id. */
  int TO_OP = 35;
  /** RegularExpression Id. */
  int JOIN = 36;
  /** RegularExpression Id. */
  int IF = 37;
  /** RegularExpression Id. */
  int ELSEIF = 38;
  /** RegularExpression Id. */
  int ELSE = 39;
  /** RegularExpression Id. */
  int END = 40;
  /** RegularExpression Id. */
  int RETURN = 41;
  /** RegularExpression Id. */
  int VAR = 42;
  /** RegularExpression Id. */
  int LAMBDA = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int FALSE = 45;
  /** RegularExpression Id. */
  int NULL = 46;
  /** RegularExpression Id. */
  int NAME_LITERAL = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<C_SINGLE_COMMENT>",
    "<C_MULTILINE_COMMENT>",
    "<WHITESPACE>",
    "<EOL>",
    "\"0\"",
    "<DIGIT_NONZERO>",
    "<DIGIT>",
    "<NUMBER_INTEGER>",
    "<NUMBER_DECIMAL>",
    "\"\\\'\\\'\"",
    "\"\\\"\\\"\"",
    "<STRING_SINGLE_BODY>",
    "<STRING_DOUBLE_BODY>",
    "<STRING_SINGLE_NONEMPTY>",
    "<STRING_DOUBLE_NONEMPTY>",
    "\",\"",
    "\":\"",
    "\"?\"",
    "\";\"",
    "\"=\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"->\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"~\"",
    "\"%{\"",
    "\"{\"",
    "\"}\"",
    "<SPIN>",
    "<B_O_OP>",
    "<A_O_OP>",
    "<TO_OP>",
    "\"join\"",
    "\"if\"",
    "\"elseif\"",
    "\"else\"",
    "\"end\"",
    "\"return\"",
    "\"var\"",
    "\"lambda\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "<NAME_LITERAL>",
  };

}
