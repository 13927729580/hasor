options {
    STATIC=false;
//    LOOKAHEAD = 2;
//    FORCE_LA_CHECK=true;
}

// ------------------------------------------------------------------------------------------------

PARSER_BEGIN(GraphParser)
package net.hasor.data.ql.dsl.parser;
import net.hasor.data.ql.dsl.*;
import net.hasor.data.ql.dsl.domain.EqType;
import java.util.*;
import java.io.InputStream;
import java.io.ByteArrayInputStream;

public class GraphParser {
    private GraphParser (){}
    //
    public static void parserGraphQL(String queryString) throws ParseException {
        GraphParser parser = new GraphParser(new ByteArrayInputStream(queryString.getBytes()));
        parser.rootBlock();
    }
    public static void parserGraphQL(InputStream inputStream,String encoding) throws ParseException {
        GraphParser parser = new GraphParser(inputStream,encoding);
        parser.rootBlock();
    }
}
PARSER_END(GraphParser)

// ------------------------------------------------------------------------------------------------

// Ignore comments
SKIP: {
    <C_SINGLE_COMMENT: "//" (~["\n","\r","\f"])* <EOL>> |
    <C_MULTILINE_COMMENT: "/*" (~[])* "*/"> |

    <WHITESPACE: " " | "\t"> |
    <EOL: "\n" | "\r" | "\f">
}

// Number token
TOKEN:{
	<#ZERO: "0"> |
	<#DIGIT_NONZERO: ["1"-"9"]> |
	<#DIGIT: (<DIGIT_NONZERO> | <ZERO>) > |
	<NUMBER_INTEGER:
		("-")?
		( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) )
	> |
	<NUMBER_DECIMAL:
		("-")?
		( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) )
		("."
			(<DIGIT>)+
			(
				["e","E"]
				("+" | "-")?
				(<DIGIT>)+
			)?
		)
	>
}
TOKEN:{
      <STRING_SINGLE_EMPTY: "''">
    | <STRING_DOUBLE_EMPTY: "\"\"">
    | <#STRING_SINGLE_BODY: (
            (~["'","\\","\r","\n","\f","\t"]) |
            ( "\\" ( "r" | "n" | "f" | "\\" | "/" | "'" | "b" | "t" ) )
        )+>
    | <#STRING_DOUBLE_BODY: (
            (~["\"","\\","\r","\n","\f","\t"]) |
            ( "\\" ( "r" | "n" | "f" | "\\" | "/" | "\"" | "b" | "t" ) )
        )+>
    | <STRING_SINGLE_NONEMPTY: <QUOTE_SINGLE> <STRING_SINGLE_BODY> <QUOTE_SINGLE>>
    | <STRING_DOUBLE_NONEMPTY: <QUOTE_DOUBLE> <STRING_DOUBLE_BODY> <QUOTE_DOUBLE>>
}

/* IDENTIFIERS */
TOKEN: {
      < COMMA                   : "," >
    | < COLON                   : ":" >
    | < QUEM                    : "?" >
    | < SEMI                    : ";" >
    | < EQ                      : "=">
    | < QUOTE_SINGLE            : "'" >
    | < QUOTE_DOUBLE            : "\"" >
    | < LAMBDAB                 : "->" >

    | < OPAR                    : "(" >
    | < CPAR                    : ")" >
    | < OBRA                    : "[" >
    | < CBRA                    : "]" >
    | < ORI                     : "~" >

    | < OCBRR                   : "%{" >
    | < OCBR                    : "{" >
    | < CCBR                    : "}" >

    | <#SPIN                    : ( "++" | "--" ) >
    | < B_O_OP                  : ( <SPIN> | "!" ) >
    | < A_O_OP                  : <SPIN> >
    | < TO_OP                   : ( "+" | "-" | "*" | "/" | "%" | "\\"      |
                                    ">" | ">=" | "<" | "<=" | "==" | "!="   |
                                    "&" | "|" | "^"                         |
                                    "<<" | ">>" | ">>>"                     |
                                    "&&" | "||" )
      >
}

TOKEN: {
	<#JOIN: "join">
    | < IF                      : "if" >
    | < ELSEIF                  : "elseif" >
    | < ELSE                    : "else" >
    | < END                     : "end" >
    | < RETURN                  : "return" >
    | < VAR                     : "var" >
    | < LAMBDA                  : "lambda" >
    | < TRUE                    : "true" >
    | < FALSE                   : "false" >
    | < NULL                    : "null" >
    | <NAME_LITERAL             : ("$" | "#" | "_" | ["A"-"Z"] | ["a"-"z"] ) ( "." | "_" | ["0"-"9"] | ["A"-"Z"] | ["a"-"z"] )* >
}

//-----------------------------------------------------------------------------

// .标识符
void identifier() : {}{
    (
        <NAME_LITERAL>
    ) | (
        <OCBRR> <NAME_LITERAL> <CCBR>
    )
}

// .带引号的字符串
void stringValue() : {}{
    (
        <STRING_DOUBLE_EMPTY>       |
        <STRING_DOUBLE_NONEMPTY>    |
        <STRING_SINGLE_EMPTY>       |
        <STRING_SINGLE_NONEMPTY>
    )
}

// .空值
void nullValue() : {}{
	<NULL>
}

// .布尔
void booleanValue() : {}{
    (
        <TRUE>                      |
        <FALSE>
    )
}

// .数字
void numberValue() : {}{
	(
		<NUMBER_DECIMAL>            |
		<NUMBER_INTEGER>
	)
}

// .列表：[ ... ]
void list() : {}{
    <OBRA>
        expression()
        (
            <COMMA> expression()
        )*
    <CBRA>
}

// .对象：
void object() : {} {
    <OCBR>
        stringValue() ( <COLON> expression() )?
        (
            <COMMA> stringValue() ( <COLON> expression() )?
        )*
    <CCBR>
}

//-----------------------------------------------------------------------------

// .表达式 =   表达式 or 表达式 + 运算符
void expression() : {} {
[
    (
        // 优先级
        <OPAR> expression() <CPAR>
    ) | (
        // 一元运算(前)
        <B_O_OP> basicValue()
    ) | (
        basicValue()
    )
]

    (
        afterExpression()
    )?
}

void afterExpression() :{} {
                (
                    // 一元运算(后)
                    <A_O_OP>
                ) | (
                    // 二元运算
                    <TO_OP> expression()
                ) | (
                    // 三元运算
                    <QUEM> expression() <COLON> expression()
                )
}



// .值
void basicValue() : {} {
    (
        nullValue()                 |
        booleanValue()              |
        numberValue()               |
        (
            identifier()
            (
                funCall()
            )?

        )                           |
        stringValue()               |
        list()                      |
        object()
    )
}

//-----------------------------------------------------------------------------
// .参数集：(xx , xx , xx)
void paramSet() : {} {
    LOOKAHEAD(2)
    (
        <OPAR> <CPAR>
    ) | (
        <OPAR>
            paramItem()
            (
                <COMMA> paramItem()
            )*
        <CPAR>
    )
}

// .函数参数
void paramItem() : {} {
    (
        lambdaCall()
    ) | (
        expression()
    )
}

// .函数调用
void funCall() : {} {
    paramSet()
    (
        list()      |
        object()    |
        <ORI>
    )
}

// .Lambda函数： lambda : (obj,obj2) -> {}
void lambdaCall() : {} {
    <LAMBDA> <COLON>
    (
        LOOKAHEAD(2)
        (
            <OPAR><CPAR>
        ) | (
            <OPAR>
                <NAME_LITERAL>
                (
                    <COMMA> <NAME_LITERAL>
                )*
            <CPAR>
        )
    )
    <LAMBDAB>
    (
        (
            <OCBR> blockSet() <CCBR>
        ) | LOOKAHEAD(block()) (
            block()
        )
    )
}

//-----------------------------------------------------------------------------
// .函数
void varBlock() : {} {
    <VAR> identifier() <EQ>
    (
        lambdaCall()    |
        expression()
    )
}

// .判断
void ifBlock() : {} {
        <IF> <OPAR> expression() <CPAR>     blockSet()
    (
        <ELSEIF> <OPAR> expression() <CPAR> blockSet()
    )*
    (
        <ELSE>                              blockSet()
    )?
        <END>
}

// .反回
void returnBlock() : {} {
    <RETURN> expression()
}

// .块
void block() : {} {
    (
        varBlock()                  |
        ifBlock()                   |
        returnBlock()
    )
}

// .块
void blockSet() : {} {
    (
        block() ( <SEMI> )?
    )*
}


// 入口
void rootBlock() : {} {
    blockSet() <EOF>
}