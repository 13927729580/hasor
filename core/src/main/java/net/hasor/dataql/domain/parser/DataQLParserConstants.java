/* Generated By:JavaCC: Do not edit this line. DataQLParserConstants.java */
/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.hasor.dataql.domain.parser;
/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DataQLParserConstants {
    /** End of File. */
    int      EOF                 = 0;
    /** RegularExpression Id. */
    int      C_SINGLE_COMMENT    = 6;
    /** RegularExpression Id. */
    int      C_MULTILINE_COMMENT = 7;
    /** RegularExpression Id. */
    int      EOL                 = 8;
    /** RegularExpression Id. */
    int      ZERO                = 9;
    /** RegularExpression Id. */
    int      SYMBOL              = 10;
    /** RegularExpression Id. */
    int      DIGIT               = 11;
    /** RegularExpression Id. */
    int      INTEGER_NUM         = 12;
    /** RegularExpression Id. */
    int      HEX_NUM             = 13;
    /** RegularExpression Id. */
    int      OCTAL_NUM           = 14;
    /** RegularExpression Id. */
    int      BINARY_NUM          = 15;
    /** RegularExpression Id. */
    int      DECIMAL_NUM         = 16;
    /** RegularExpression Id. */
    int      IF                  = 17;
    /** RegularExpression Id. */
    int      ELSEIF              = 18;
    /** RegularExpression Id. */
    int      ELSE                = 19;
    /** RegularExpression Id. */
    int      END                 = 20;
    /** RegularExpression Id. */
    int      RETURN              = 21;
    /** RegularExpression Id. */
    int      THROW               = 22;
    /** RegularExpression Id. */
    int      VAR                 = 23;
    /** RegularExpression Id. */
    int      LAMBDA              = 24;
    /** RegularExpression Id. */
    int      TRUE                = 25;
    /** RegularExpression Id. */
    int      FALSE               = 26;
    /** RegularExpression Id. */
    int      NULL                = 27;
    /** RegularExpression Id. */
    int      OPTION              = 28;
    /** RegularExpression Id. */
    int      COMMA               = 29;
    /** RegularExpression Id. */
    int      COLON               = 30;
    /** RegularExpression Id. */
    int      QUEM                = 31;
    /** RegularExpression Id. */
    int      SEMI                = 32;
    /** RegularExpression Id. */
    int      ASS                 = 33;
    /** RegularExpression Id. */
    int      QUOTE_SINGLE        = 34;
    /** RegularExpression Id. */
    int      QUOTE_DOUBLE        = 35;
    /** RegularExpression Id. */
    int      OPAR                = 36;
    /** RegularExpression Id. */
    int      CPAR                = 37;
    /** RegularExpression Id. */
    int      OBRA                = 38;
    /** RegularExpression Id. */
    int      CBRA                = 39;
    /** RegularExpression Id. */
    int      OCBRR               = 40;
    /** RegularExpression Id. */
    int      OCBR                = 41;
    /** RegularExpression Id. */
    int      CCBR                = 42;
    /** RegularExpression Id. */
    int      BANG                = 43;
    /** RegularExpression Id. */
    int      PLUS                = 44;
    /** RegularExpression Id. */
    int      MINUS               = 45;
    /** RegularExpression Id. */
    int      STAR                = 46;
    /** RegularExpression Id. */
    int      SLASH               = 47;
    /** RegularExpression Id. */
    int      REM                 = 48;
    /** RegularExpression Id. */
    int      ALI                 = 49;
    /** RegularExpression Id. */
    int      GT                  = 50;
    /** RegularExpression Id. */
    int      GE                  = 51;
    /** RegularExpression Id. */
    int      LT                  = 52;
    /** RegularExpression Id. */
    int      LE                  = 53;
    /** RegularExpression Id. */
    int      EQ                  = 54;
    /** RegularExpression Id. */
    int      NE                  = 55;
    /** RegularExpression Id. */
    int      BIT_AND             = 56;
    /** RegularExpression Id. */
    int      BIT_OR              = 57;
    /** RegularExpression Id. */
    int      XOR                 = 58;
    /** RegularExpression Id. */
    int      LSHIFT              = 59;
    /** RegularExpression Id. */
    int      RSIGNEDSHIFT        = 60;
    /** RegularExpression Id. */
    int      RUNSIGNEDSHIFT      = 61;
    /** RegularExpression Id. */
    int      SC_OR               = 62;
    /** RegularExpression Id. */
    int      SC_AND              = 63;
    /** RegularExpression Id. */
    int      LETTER              = 64;
    /** RegularExpression Id. */
    int      STR_UNICODE         = 65;
    /** RegularExpression Id. */
    int      STR_DOUBLE_BODY     = 66;
    /** RegularExpression Id. */
    int      STR_DOUBLE_QUOTED   = 67;
    /** RegularExpression Id. */
    int      STR_SINGLE_BODY     = 68;
    /** RegularExpression Id. */
    int      STR_SINGLE_QUOTED   = 69;
    /** RegularExpression Id. */
    int      STR_EMPTY           = 70;
    /** RegularExpression Id. */
    int      IDENTIFIER_S        = 71;
    /** RegularExpression Id. */
    int      IDENTIFIER_A        = 72;
    /** RegularExpression Id. */
    int      IDENTIFIER          = 73;
    /** Lexical state. */
    int      DEFAULT             = 0;
    /** Literal token values. */
    String[] tokenImage          = { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"", "\"\\f\"", "<C_SINGLE_COMMENT>", "<C_MULTILINE_COMMENT>", "<EOL>", "\"0\"", "<SYMBOL>", "<DIGIT>", "<INTEGER_NUM>", "<HEX_NUM>", "<OCTAL_NUM>", "<BINARY_NUM>", "<DECIMAL_NUM>", "\"if\"", "\"elseif\"", "\"else\"", "\"end\"", "\"return\"", "\"throw\"", "\"var\"", "\"lambda\"", "\"true\"", "\"false\"", "\"null\"", "\"option\"", "\",\"", "\":\"", "\"?\"", "\";\"", "\"=\"", "\"\\\'\"", "\"\\\"\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"%{\"", "\"{\"", "\"}\"", "\"!\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"",
            "\"%\"", "\"\\\\\"", "\">\"", "\">=\"", "\"<\"", "\"<=\"", "\"==\"", "\"!=\"", "\"&\"", "\"|\"", "\"^\"", "\"<<\"", "\">>\"", "\">>>\"", "\"||\"", "\"&&\"", "<LETTER>", "<STR_UNICODE>", "<STR_DOUBLE_BODY>", "<STR_DOUBLE_QUOTED>", "<STR_SINGLE_BODY>", "<STR_SINGLE_QUOTED>", "<STR_EMPTY>", "<IDENTIFIER_S>", "<IDENTIFIER_A>", "<IDENTIFIER>", "\"~\"", "\"->\"", };
}
