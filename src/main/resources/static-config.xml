<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://project.hasor.net/hasor/schema/hasor-rsf">
    <!-- 框架配置，包扫描范围 -->
    <hasor>
        <loadPackages>net.hasor.rsf.*</loadPackages>

        <modules>
            <!-- RSF框架本体 -->
            <module>net.hasor.rsf.bootstrap.RsfFrameworkModule</module>
            <!-- Telnet控制台插件 -->
            <module>net.hasor.rsf.console.RsfConsoleModule</module>
            <!-- Web支持插件 -->
            <module>net.hasor.rsf.web.RsfWebModule</module>

            <!-- RSF-Center 启动入口 -->
            <module>net.hasor.rsf.center.server.bootstrap.RsfCenterFrameworkModule</module>
            <!-- 注册中心插件 -->
            <module>net.hasor.rsf.center.client.RsfCenterModule</module>
        </modules>

        <!-- Binder扩展 -->
        <apiBinderSet>
            <binder type="net.hasor.rsf.RsfApiBinder">net.hasor.rsf.container.RsfApiBinerCreater</binder>
            <binder type="net.hasor.rsf.RsfPublisher">net.hasor.rsf.container.RsfApiBinerCreater</binder>
        </apiBinderSet>

        <!-- RSF框架环境变量 -->
        <environmentVar>
            <!-- 是否启用RSF，默认情况启用。启用了RSF之后它会开启相应的端口和线程。 -->
            <RSF_ENABLE>true</RSF_ENABLE>

            <!-- app_key -->
            <RSF_APP_KEY></RSF_APP_KEY>
            <!-- app KeySecret -->
            <RSF_APP_KEY_SECRET></RSF_APP_KEY_SECRET>
            <!-- 应用程序所属单元 -->
            <RSF_APP_UNIT>default</RSF_APP_UNIT>

            <!-- RSF对外提供服务的IP -->
            <RSF_SERVICE_IP>local</RSF_SERVICE_IP>
            <!-- RSF对外提供服务的服务端口 -->
            <RSF_SERVICE_PORT>2180</RSF_SERVICE_PORT>
            <!-- Telnet 控制台端口 -->
            <RSF_CONSOLE_PORT>2181</RSF_CONSOLE_PORT>

            <!-- 如果RSF是工作在内网，则需要通过网关进行映射将服务暴露到外网，这里填写网关在外网的IP地址 -->
            <RSF_GATEWAY_IP></RSF_GATEWAY_IP>
            <!-- 如果RSF是工作在内网，则需要通过网关进行端口映射，这里填写外网端口号 -->
            <RSF_GATEWAY_PORT></RSF_GATEWAY_PORT>

            <!-- 注册中心(例:rsf://127.0.0.1:2180) -->
            <!-- Center工作在集群模式下的时候,集群的机器列表,注意:集群中每台机器的对应clusterServers配置都应相同,center在启动时会进行检测 -->
            <RSF_CENTER_SERVERS></RSF_CENTER_SERVERS>
            <!-- 注册中心工作模式,默认:none -->
            <RSF_CENTER_WORK_MODE>none</RSF_CENTER_WORK_MODE>

            <!--
                授权密钥文件名,查找顺序是 WORK_HOME 下第一优先顺序。classpath 第二优先顺序,只加载一个配置文件。
                    当 "rsfCenter.adapterConfig.authQuery" 配置使用 net.hasor.rsf.center.server.adapter.FileAuthQuery 时有效
            -->
            <RSF_CENTER_AUTH_FILE_NAME>auth_keys.xml</RSF_CENTER_AUTH_FILE_NAME>
            <!-- 是否开启匿名应用连入的请求: 默认开启 -->
            <RSF_CENTER_AUTH_ANONYMOUS>true</RSF_CENTER_AUTH_ANONYMOUS>
        </environmentVar>
    </hasor>

    <!--
        Hasor-RSF ( 分布式服务框架 )

            - enable  : 是否启用RSF，默认情况启用。启用了RSF之后它会开启相应的端口和线程。
            - address : RSF，无法在多个网卡上同时对外提供服务，因此您需要指定一个IP地址来告诉RSF工作在哪张网卡上。
                            “local”和“localhost”的区别，local指的是，本地默认网卡的IP地址。“localhost”对应的IP地址是“127.0.0.1”
                            如果您的部署环境有多张网卡，那么可以通过指定ip地址，来告诉RSF具体工作的网卡地址。
            - port    : RSF对外提供服务的监听端口号。
    -->
    <hasor.rsfConfig enable="${RSF_ENABLE}" address="${RSF_SERVICE_IP}" port="${RSF_SERVICE_PORT}">
        <!-- 所属单元名称，单元是用来给应用部署划分虚拟机房的。RSF通过单元可以有效控制跨机房调用，从而提升远程调用效率。-->
        <unitName>${RSF_APP_UNIT}</unitName>

        <!--
            RSF管理控制台(Telnet)
                - telnet  	  : 监听端口号。
                - inBound 	  : 可以使用RSF管理控制台的IP地址列表，默认是“127.0.0.1”。
                                    默认情况下您必须登录到应用服务器上，才能够访问RSF管理控制台。
                提示：RSF在启动的时，如果管理控制台的端口被占用，是不会影响到整个RSF启动进程。
        -->
        <console port="${RSF_CONSOLE_PORT}" inBound="local,127.0.0.1"/>

        <!--
            RSF 网关配置，当 RSF 工作在内网时因为 RSF 是工作在内网环境无法取得公网地址，因此这里需要配置RSF公网地址和端口号。
                - address  	  : 网关IP地址
                - port   	  : 网关上RSF的端口号
        -->
        <gateway address="${RSF_GATEWAY_IP}" port="${RSF_GATEWAY_PORT}"/>

        <!--
            注册中心，用于更新服务列表的配置服务器
                - timeout         : RSF 和 Center 之间发起远程调用超时时间(6秒)
                - heartbeatTime   : 服务心跳时间(30秒)
                - automaticOnline : RSF在启动之后是否自动转换为 online 状态。
        -->
        <centerServers timeout="6000" heartbeatTime="30000" automaticOnline="true">
            <server>${RSF_CENTER_SERVERS}</server>
        </centerServers>

        <!--用于设置默认情况下RSF服务的一些基本信息。
                version = 在未指定注册服务的版本信息时使用的版本号。
                group   = 在未指定注册服务的分组信息时使用的分组名称。
                timeout = 在未指定注册服务的超时时间情况下 6000 毫秒超时。
         -->
        <defaultServiceValue version="1.0.0" group="RSF" timeout="6000"/>

        <!--通用配置
                defaultTimeout  = 客户端RPC发起请求超时时间
                maximumRequest  = 最大允许的并发请求数
                sendLimitPolicy = 并发调用请求限制策略，当并发调用达到限制值后的策略（Reject 抛出异常，WaitSecond 等待1秒重试）
                connectTimeout  = 客户端发起一个连接到完成RSF协议握手所允许的最大耗时（单位毫秒）。
                wrapperType     = 客户端在包装远程接口的时候使用的动态代理方式。
                                    fast	内置的字节码生成机制,部分jdk1.8兼容有问题，需要添加“-noverify”参数以压制jvm对字节码的强制校验。
                                                http://stackoverflow.com/questions/15122890/java-lang-verifyerror-expecting-a-stackmap-frame-at-branch-target-jdk-1-7
                                    proxy	java原生的动态代理，理论上性能会稍微低一些，但是不会有兼容性问题。
                
        -->
        <client defaultTimeout="6000" maximumRequest="200" sendLimitPolicy="Reject" connectTimeout="3000" wrapperType="proxy"/>

        <!--
            处理队列配置（用于配置ExecutesManager）
                - maxSize       : 处理任务队列的最小大小，作为服务端当队列满了之后所有新进来的请求都会被回应 ChooseOther。
                - minPoolSize   : the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set.
                - maxPoolSize   : the maximum number of threads to allow in the pool. keepAliveTime(SECONDS) when the number of threads is greater than the core, 
                              this is the maximum time that excess idle threads will wait for new tasks before terminating.
                - keepAliveTime : 
        -->
        <queue maxSize="4096" minPoolSize="1" maxPoolSize="4" keepAliveTime="300"/>

        <!--
            网络数据包线程配置
                workerThread : 处理网络IO数据包的线程数。
                listenThread : 处理网络监听请求的线程数。
        -->
        <network workerThread="8" listenThread="1"/>

        <!-- 作为服务端向客户端响应时携带的选项（demo） -->
        <serverOptionSet>
            <option key="identity">Response</option>
        </serverOptionSet>

        <!-- 作为客户端向服务端发送调用请求时携带的选项（demo） -->
        <clientOptionSet>
            <option key="identity">Request</option>
        </clientOptionSet>

        <!-- 序列器（在修改序列化方式时，需要确保远程和本地都支持） -->
        <serializeType default="Hessian">
            <!-- JSON-格式序列化 -->
            <serialize name="Json">net.hasor.rsf.serialize.coder.JsonSerializeCoder</serialize>
            <!-- Java-原生序列化 -->
            <serialize name="Java">net.hasor.rsf.serialize.coder.JavaSerializeCoder</serialize>
            <!-- Hessian-格式序列化 -->
            <serialize name="Hessian">net.hasor.rsf.serialize.coder.HessianSerializeCoder</serialize>
        </serializeType>

        <!-- 默认QoS流控规则,该配置仅当没有配置任何QoS规则时才启用 -->
        <defaultSpeedFlowControl>
            <action>service</action>    <!-- 速率控制方式：每服务、每方法、每地址 -->
            <rate>2000</rate>           <!-- 稳态速率 -->
            <peak>5000</peak>           <!-- 峰值速率 -->
            <timeWindow>10</timeWindow> <!-- 时间窗口 -->
        </defaultSpeedFlowControl>

        <!-- 流控 & 路由 -->
        <route>
            <flowcontrol>
                <!-- 随机选址 -->
                <random>net.hasor.rsf.address.route.flowcontrol.random.RandomFlowControl</random>
                <!-- QoS速率 -->
                <speed>net.hasor.rsf.address.route.flowcontrol.speed.SpeedFlowControl</speed>
                <!-- 单元化地址本计算 -->
                <unit>net.hasor.rsf.address.route.flowcontrol.unit.UnitFlowControl</unit>
            </flowcontrol>
            <!-- 参数级路由计算，参数key生成器 -->
            <argsKey>net.hasor.rsf.address.route.rule.DefaultArgsKey</argsKey>
        </route>

        <!-- 地址管理 -->
        <addressPool>
            <!-- 启用磁盘地址本缓存，在refreshCacheTime期间每隔1小时自动写入一次。（被回收的服务不享受此待遇） -->
            <localDiskCache>true</localDiskCache>
            <!-- 每次缓存地址本到磁盘时的时间间隔（单位:毫秒）默认:1小时 -->
            <diskCacheTimeInterval>3600000</diskCacheTimeInterval>
            <!-- 自动刷新addressPool地址本缓存的时间（单位:毫秒）默认:1分钟 -->
            <refreshCacheTime>60000</refreshCacheTime>
            <!-- (失效地址重试机制)当地址失效之后要经过多长时间才能被重新列入备选地址。（单位:毫秒）默认:2分钟 -->
            <invalidWaitTime>120000</invalidWaitTime>
        </addressPool>

        <!-- 安全 -->
        <security>
            <!-- app_key -->
            <appKeyID>${RSF_APP_KEY}</appKeyID>
            <!-- app KeySecret -->
            <appKeySecret>${RSF_APP_KEY_SECRET}</appKeySecret>
        </security>

    </hasor.rsfConfig>

    <!--
        Hasor-RSF ( 分布式服务框架的注册中心 )
            workAt  : 注册中心工作模式，可选的配置有
                        none    禁止模式，不启动
                        alone   单机模式，一台机器
                        cluster 集群模式，基数台机器
    -->
    <hasor.rsfCenter workAt="${RSF_CENTER_WORK_MODE}">
        <!--
            Center工作在集群模式下的时候,集群的机器列表
                注意:集群中每台机器的对应clusterServers配置都应相同,center在启动时会进行检测
        -->
        <clusterServers>${RSF_CENTER_SERVERS}</clusterServers>

        <!--
            推送配置
               - threadSize   : 负责执行推送任务的线程数。
               - queueMaxSize : 推送队列最大长度，当推送处理队列达到这个阀值之后,新的推送任务将不会被接受。受影响Center将会暂定服务。
               - sleepTime    : 当遇到推送队列满了之后等待多长时间重试一次，如果重试的时候队列依然满的，那么放弃推送。(单位毫秒)
         -->
        <polling threadSize="10" queueMaxSize="20000" sleepTime="1000"/>

        <!-- 服务管理 -->
        <serviceManager>
            <!-- 服务提供者,心跳过期时间(30秒) -->
            <providerExpireTime>30000</providerExpireTime>
            <!-- 服务订阅者,心跳过期时间(30秒) -->
            <consumerExpireTime>30000</consumerExpireTime>
        </serviceManager>

        <!-- 数据适配器 -->
        <adapterConfig>
            <dataAdapter>net.hasor.rsf.center.server.adapter.HashMapDataAdapter</dataAdapter>
            <authQuery>net.hasor.rsf.center.server.adapter.FileAuthQuery</authQuery>
        </adapterConfig>

        <!-- 授权配置 : allowAnonymous 允许匿名应用 -->
        <auth allowAnonymous="${RSF_CENTER_AUTH_ANONYMOUS}"/>
    </hasor.rsfCenter>
</config>